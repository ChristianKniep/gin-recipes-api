version: '3'
services:
  gin:
    image: golang:1.17
    volumes:
      - ${PWD}:/go/src/local/gin
    ports:
      - 8080:8080
    command: ["sleep", "inf"]
  mongo:
    image: mongo:5.0.5
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express:
    image: mongo-express:0.54.0
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  jeager:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 9411:9411
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./compose/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ./compose/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
  grafana:
    image: "grafana/grafana:latest"
    restart: unless-stopped
    user: "0"
    volumes:
      - "./compose/grafana/data:/var/lib/grafana"
    ports:
      - 3000:3000
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
#  loki:
#    image: grafana/loki:2.4.1
#    restart: unless-stopped
#    ports:
#      - 3100:3100
#    volumes:
#      - ./compose/loki/config/loki-config.yaml:/etc/loki/loki-config.yaml
#      - ./compose/loki/data:/data/loki
#    command: -config.file=/etc/loki/loki-config.yaml
#  zinc:
#    image: public.ecr.aws/m5j1b6u0/zinc:v0.1.1
#    ports:
#      - 4080:4080
#    environment:
#     - FIRST_ADMIN_USER=admin
#     - FIRST_ADMIN_PASSWORD=Complexpass#123
#     - DATA_PATH=/data
#    volumes:
#      - ./zinc/data:/data
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    volumes:
      - ./compose/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
  logstash:
    image: docker.elastic.co/logstash/logstash:7.16.1
    volumes:
      - ./compose/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./compose/logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - zinc
  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.1
    volumes:
      - ./compose/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

volumes:
  elasticsearch: